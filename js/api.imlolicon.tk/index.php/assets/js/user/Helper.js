
// ==UserScript==
// @name         Á≥äÁã∏-BÁ´ôÊàêÂàÜÊü•ËØ¢Helper
// @namespace    www.bilibili.com
// @version      1.0.0
// @description  Áî®‰∫éÊ†áÊ≥®BÁ´ôËØÑËÆ∫Âå∫Áî®Êà∑ÊàêÂàÜÂ±ûÊÄß,‰∏âÁõ∏‰∏éVtuberÁöÑÊï∞ÊçÆÊù•Ê∫ê‰∫éÂéüÊèí‰ª∂"Êñ∞‰∏âÁõ∏‰πãÂäõÊåáÁ§∫Âô®F",‰∏éÊú¨‰∫∫Êó†ÂÖ≥;ÂÖ∂‰Ωô‰∏∫Ëá™Â∑±Ê∑ªÂä†,‰ºòÂåñ‰∫ÜÂéüÊèí‰ª∂Â†Ü‰∫Ü‰∏ÉÂÖ´ÁôæË°åÁöÑÂ±éÂ±±,Âä®ÊÄÅÂåñÂ§ÑÁêÜÂêé‰ªÖ200‰ΩôË°å;‰ªÖ‰æõÂ®±‰πê‰∏ç‰ª£Ë°®Êú¨‰∫∫‰ªª‰ΩïÁ´ãÂú∫
// @author       biyuehu
// @match        https://*.bilibili.com/*
// @icon         https://static.hdslb.com/images/favicon.ico
// @connect      bilibili.com
// @grant        GM_xmlhttpRequest
// @license MIT
// @run-at document-end
// ==/UserScript==

/*** 
 * @Author: Biyuehu
 * @Blog: http://imlolicon.tk
 * @Date: 2023-02-15 17:46:12
 */

 (function () {
    'use strict';

    /* ÈÖçÁΩÆÂå∫ */
    const config = {
        times: 2500, // Ê†áÁ≠æÂ§ÑÁêÜÈó¥ÈöîÊó∂Èó¥ Âçï‰Ωç:ms
        testLog: true // ÊòØÂê¶ÂºÄÂêØË∞ÉËØïÊó•Âøó
    }
    // ÊòæÁ§∫Ê†áÁ≠æÈÖçÁΩÆÂú®üëáÈù¢

    const threeList = [
        ["„Äê ‰º†Â•á | ‰∏âÁõ∏‰πãÂäõ„Äë", "ÂéüÁ•û&ÊòéÊó•ÊñπËàü&ÁéãËÄÖËç£ËÄÄ", "#FFD700"],
        ["„Äê Âè≤ËØó | ‰∫åÂà∫ËûàÂèåË±°Èôê„Äë", "ÂéüÁ•û&ÊòéÊó•ÊñπËàü&!ÁéãËÄÖËç£ËÄÄ", "#FF0000"],
        ["„Äê Âè≤ËØó | ÂèåÊâπÈΩêËÅö„Äë", "ÂéüÁ•û&!ÊòéÊó•ÊñπËàü&ÁéãËÄÖËç£ËÄÄ", "#FF0000"],
        ["„Äê Âè≤ËØó | Á®ÄÊúâÁöÑÂ≠òÂú®„Äë", "!ÂéüÁ•û&ÊòéÊó•ÊñπËàü&ÁéãËÄÖËç£ËÄÄ", "#FF0000"],
        ["„Äê Á®ÄÊúâ | ÂéüÊâπ„Äë", "ÂéüÁ•û&!ÊòéÊó•ÊñπËàü&!ÁéãËÄÖËç£ËÄÄ", "#6600CC"],
        ["„Äê Á®ÄÊúâ | Á≤•Áïú„Äë", "!ÂéüÁ•û&ÊòéÊó•ÊñπËàü&ÁéãËÄÖËç£ËÄÄ", "#6600CC"],
        ["„Äê Á®ÄÊúâ | ÂÜúÊâπ„Äë", "!ÂéüÁ•û&!ÊòéÊó•ÊñπËàü&ÁéãËÄÖËç£ËÄÄ", "#6600CC"]
    ];

    const vtuberList = [
        ["ÂòâÂøÉÁ≥ñ", "ÂòâÁÑ∂", "#E799B0"],
        ["ÈõèËçâÂß¨", "Â°îËè≤", "#FF00CC"],
        ["Ê£∫ÊùêÊùø", "Êù±Èõ™ËìÆ", "#C0C0C0"],
        ["Êù∞Â∞º", "‰∏ÉÊµ∑", "#947583"],
        ["ÂñµÂñµÈú≤", "Áå´Èõ∑", "#00FF00"],
        ["‰∏âÁïú", "Â∞èÁãóËØ¥", "#B8A6D9"],
        ["È°∂Á¢ó‰∫∫", "ÂêëÊôö", "#9AC8E2"],
        ["Ë¥ùÊûÅÊòü", "Ë¥ùÊãâ", "#DB7D74"],
        ["Â•∂Ê∑áÁê≥", "‰πÉÁê≥", "#576690"],
        ["Â∞èÊòüÊòü", "ÊòüÁû≥", "#E0E0E0"],
        ["Â∞èÂ≠©Ê¢ì", "Ê¢ì", "#9900FF"]
    ];

    const vocaloadList = [
        ["È™ëÂ£´Âõ¢", "ÂàùÈü≥|miku|MIKU", "#00CC99"],
        ["Ê¥õÂ§©‰æù", "Â§©‰æù", "#33CCFF"]
    ];

    const igameList = [
        ["‰ªôÂâë"],
        ["Âè§Ââë"],
        ["ÈÄÜÊ∞¥ÂØí"],
        ["ËØõ‰ªô‰∏ñÁïå"],
        ["ÂâëÁΩë"]
    ];

    const cgameList = [
        ["ÈªëÁ•ûËØù"],
        ["LOL", "Ëã±ÈõÑËÅîÁõü|LOL"],
        ["COD", "‰ΩøÂëΩÂè¨Âî§"]
    ];

    const ecygameList = [
        ["ÂπªÂ°î", null, "#FFCC66"],
        ["ÊàòÂèå"],
        ["È∏£ÊΩÆ"],
        ["Á±≥-Èõ∂", "ÁªùÂå∫Èõ∂", "#0066FF"],
        ["Á±≥-Â¥©", "Â¥©Âùè|Â¥©‰∏â", "#0066FF"],
        ["Á±≥-ÈìÅ", "ÊòüÁ©πÈìÅÈÅì", "#0066FF"],
        ["ÂÖâÈÅá"],
        ["Á¢ßËìù", null, "#33CCC"],
        ["ÊúàÁêÉ‰∫∫", "FGO|ÂÜ†‰ΩçÊåáÂÆö"],
        ["ÂÖ¨‰∏ª", "ÂÖ¨‰∏ªËøûÁªì", "#CCFF99"],
        ["ËΩ¶‰∏á‰∫∫", "‰∏úÊñπproject|ÁÅµÊ¢¶|ËäôÂÖ∞ÊúµÈú≤|È≠îÁêÜÊ≤ô"]
    ];

    const zgameList = [
        ["Â°ûÂ∞îËææ"],
        ["ÊÄ™Áåé", "ÊÄ™Áâ©Áåé‰∫∫"]
    ];

    const ogameList = [
        ["ÂÆâÊÖïÂ∏å", "MINECRAFT|Minecraft|ÊàëÁöÑ‰∏ñÁïå", "#006600"],
        ["‰º†ËØ¥‰πã‰∏ã", "UNDERTALE|undertale|Undertale|‰º†ËØ¥‰πã‰∏ã", "#333366"],
        ["SCP", null, "#330000"]
    ];

    const otherList = [
        ["„Äê ÈöêËóè | Âä®ÊÄÅÊäΩÂ•ñ„Äë", "ÊäΩÂ•ñ", "#254680"]
    ];

    const defaultTag = ["„Äê ÊôÆÈÄö |  Á∫ØËâØ„Äë", "#11DD77"];

    // ‰∏çÈúÄË¶ÅÊòæÁ§∫ÁöÑÊ≥®ÈáäÂç≥ÂèØ
    const captor = [
        ['Vtuber', vtuberList],
        ['', threeList],
        ['VÂÆ∂', vocaloadList],
        ['ÁΩëÊ∏∏', igameList, "#6666FF"],
        ['Á´ØÊ∏∏', cgameList, "#6699FF"],
        ['‰∫åÊ∏∏', ecygameList, "pink"],
        ['‰∏ªÊú∫', zgameList],
        ['Ê∑∑Ê≤å', ogameList, "#FF6600"],
        ['', otherList]
    ];


    /* Functions */
    const getUid = function (htmlEntity) {
        if (isNew) {
            return htmlEntity.dataset['userId'];
        } else {
            return htmlEntity.children[0]['href'].replace(/[^\d]/g, "");
        }
    }

    const getCommentList = function () {
        if (isNew) {
            let lst = new Set();
            for (let c of document.getElementsByClassName('user-name')) {
                lst.add(c);
            }
            for (let c of document.getElementsByClassName('sub-user-name')) {
                lst.add(c);
            }
            return lst;
        } else {
            return document.getElementsByClassName('user');
        }
    }

    const log = function (message) {
        return config.testLog ? console.log(message) : null;
    };

    const searchStr = function (text, rule) {
        const ruleAnd = rule.split('&');
        let trueNum = 0;
        ruleAnd.forEach((rule2) => {
            const ruleOr = rule2.split('|');
            ruleOr.forEach(rule3 => {
                if ((rule3.substr(0, 1) === '!' && text.includes(rule3.substr(1)) !== true) || (rule3.substr(0, 1) !== '!' && text.includes(rule3))) {
                    trueNum++;
                } else {
                    return false;
                }
            });
        });

        return trueNum >= ruleAnd.length;
    }

    const spawnHtml = function (data) {
        return `<b style='color: ${data[1]}' >${data[0]}</b>`
    }

    const handel = function (text, htmlEntity) {
        let result = false;
        for (let num = 0; num < captor.length; num++) {
            let captorName = captor[num][0],
                arr = captor[num][1] ?? '#000000',
                captorColor = captor[num][2],
                isof;

            for (let init = 0; init < arr.length; init++) {
                let tempArr = arr[init];
                let viewName = tempArr[0],
                    keyword = tempArr[1] || viewName,
                    color = tempArr[2];

                if (searchStr(text, keyword)) {
                    result = true;
                    if (captorName) {
                        isof || (htmlEntity.innerHTML += `<b style='color: ${captorColor}' > „Äê ${captorName}  `);
                        isof = true;
                        htmlEntity.innerHTML += '|  </b>' + `<b style='color: ${color}'> ${viewName}</b>`;
                    } else {
                        htmlEntity.innerHTML += spawnHtml([viewName, color]);
                    }
                }
                init === arr.length - 1 && isof && (htmlEntity.innerHTML += `<b style='color: ${captorColor}' >„Äë</b>`);
            }
        };

        result || (htmlEntity.innerHTML += spawnHtml(defaultTag));
    }

    const unknown = new Set();
    const blog = 'https://api.bilibili.com/x/polymer/web-dynamic/v1/feed/space?&host_mid=';
    // Ê£ÄÊµãÊòØ‰∏çÊòØÊñ∞Áâà
    const isNew = document.getElementsByClassName('item goback').length != 0;

    log(isNew);
    log("Loading...");

    setInterval(() => {
        const commentlist = getCommentList();
        if (commentlist.length != 0) {
            commentlist.forEach(htmlEntity => {
                if (htmlEntity.innerHTML.indexOf(`<span id="huli">`) == -1) {
                    htmlEntity.innerHTML += `<span id="huli">`;
                    const uid = getUid(htmlEntity);
                    unknown.add(uid)

                    GM_xmlhttpRequest({
                        method: "get",
                        url: blog + uid,
                        data: '',
                        headers: {
                            'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36'
                        },
                        onload: res => {
                            if (res.status === 200) {
                                unknown.delete(uid);
                                const text = JSON.stringify(JSON.parse(res.response).data);
                                handel(text, htmlEntity);
                            } else {
                                log('Fail');
                                log(res);
                            }
                        },
                    });
                    htmlEntity.innerHTML += `</span>`;
                }
            });
        }
    }, config.times)
})();
